
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.eli.calc.shape.service.ws.impl;

import java.util.List;

import javax.annotation.Generated;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.eli.calc.shape.service.ShapeCalculatorService;
import com.eli.calc.shape.service.ws.ShapeCalculatorWebService;
import com.eli.calc.shape.service.ws.parms.QueueRequestParms;
import com.eli.calc.shape.service.ws.resp.PendingRequestsResponse;
import com.eli.calc.shape.service.ws.resp.RunPendingRequestsResponse;
import com.eli.calc.shape.service.ws.resp.StatusCode;
import com.eli.calc.shape.service.ws.resp.StatusResponse;

import com.eli.calc.shape.domain.CalculationRequest;

/**
 * This class was generated by Apache CXF 3.1.7
 * 2016-09-27T17:43:55.645-04:00
 * Generated source version: 3.1.7
 * 
 */

@javax.jws.WebService(
                      serviceName = "ShapeCalculatorWebService",
                      portName = "ShapeCalculatorWebService",
                      targetNamespace = "http://ws.service.shape.calc.eli.com/",
                      wsdlLocation = "classpath:wsdl/ShapeCalcWebService.wsdl",
                      endpointInterface = "com.eli.calc.shape.service.ws.ShapeCalculatorWebService")
                      
@Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2016-09-27T17:43:55.645-04:00", comments = "Apache CXF 3.1.7")
public class ShapeCalculatorWebServiceImpl implements ShapeCalculatorWebService {

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2016-09-21T13:21:57.958-04:00")
    private static final Logger LOG = LoggerFactory.getLogger(ShapeCalculatorWebServiceImpl.class);

	@Autowired
	private ShapeCalculatorService calculator;
	
    /* (non-Javadoc)
     * @see com.eli.calc.shape.service.ws.ShapeCalculatorWebService#runAllPendingRequestsNoStopOnError()*
     */
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2016-09-21T13:21:57.958-04:00")
    public RunPendingRequestsResponse runAllPendingRequestsNoStopOnError() { 

        LOG.debug("\n\n\nExecuting operation runAllPendingRequestsNoStopOnError\n\n\n");

        RunPendingRequestsResponse _return = new RunPendingRequestsResponse();

        try {

			int numRun = calculator.runAllPendingRequestsNoStopOnError();

			LOG.debug("\n\n\noperation runAllPendingRequestsNoStopOnError returning "+numRun+"\n\n\n");
			_return.setStatus(StatusCode.SUCCESS);
			_return.setDescription("Ran Any Pending Requests: " + numRun);
			_return.setNumRun(numRun);
			
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
			LOG.debug("\n\n\noperation runAllPendingRequestsNoStopOnError threw an exception..\n\n\n");
			_return.setStatus(StatusCode.ERROR);
			_return.setClazz(ex.getClass().getName());
			_return.setDescription("Error attempting to Run Pending Requests");
			_return.setErrMsg(ex.getMessage());
			if(ex.getCause()!=null) _return.setCauseMsg(ex.getCause().getMessage());
        }
		return _return;
    }

    /* (non-Javadoc)
     * @see com.eli.calc.shape.service.ws.ShapeCalculatorWebService#queueCalculation(com.eli.calc.shape.service.ws.parms.QueueCalculationParms parameters)*
     */
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2016-09-26T19:03:45.979-04:00")
    public StatusResponse queueCalculation(QueueRequestParms parameters) { 

        LOG.debug("\n\n\nExecuting operation queueCalculation\n\n\n");

        StatusResponse _return = new StatusResponse();

        try {
 
        	calculator.queueCalculationRequest(
        						parameters.getShapeName(), 
        						parameters.getCalcType(), 
        						//ShapeName.valueOf(parameters.getShapeName()), 
        						//CalcType.valueOf(parameters.getCalcType()), 
        						parameters.getDimension());
			_return.setStatus(StatusCode.SUCCESS);
			_return.setDescription("Queued Calculation: "
					+ parameters.getShapeName() + ", "
					+ parameters.getCalcType() + ", "
					+ parameters.getDimension());

            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
			LOG.debug("\n\n\noperation queueCalculation threw an exception..\n\n\n");
			_return.setStatus(StatusCode.ERROR);
			_return.setClazz(ex.getClass().getName());
			_return.setDescription("Error attempting to Queue Calculation");
			_return.setErrMsg(ex.getMessage());
			if(ex.getCause()!=null) _return.setCauseMsg(ex.getCause().getMessage());
        }
		return _return;
    }

    /* (non-Javadoc)
     * @see com.eli.calc.shape.service.ws.ShapeCalculatorWebService#getPendingRequests()*
     */
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2016-09-28T23:52:04.078-04:00")
    public PendingRequestsResponse getPendingRequests() { 

        LOG.debug("\n\n\nExecuting operation getPendingRequests\n\n\n");

        PendingRequestsResponse _return = new PendingRequestsResponse();

        try {
        	List<CalculationRequest> requests = calculator.getAllPendingRequests();

			LOG.debug("\n\n\noperation getPendingRequests returning "+ ((null!=requests)?requests.size():0) +"\n\n\n");
			_return.setStatus(StatusCode.SUCCESS);
			_return.setDescription("Got Pending Requests: " + ((null!=requests)?requests.size():0));
			
			if (null!=requests) {
				for (CalculationRequest req : requests) {
					_return.getPendingRequests().add(req);
				}
			}
			
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
			LOG.debug("\n\n\noperation getPendingRequests threw an exception..\n\n\n");
			_return.setStatus(StatusCode.ERROR);
			_return.setClazz(ex.getClass().getName());
			_return.setDescription("Error attempting to Get Pending Requests");
			_return.setErrMsg(ex.getMessage());
			if(ex.getCause()!=null) _return.setCauseMsg(ex.getCause().getMessage());
        }

        return _return;
    }

}
